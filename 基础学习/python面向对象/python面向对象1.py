'''
python的面向对象
-面向对象编程
--基础
--公有私有
--继承
--组合，mixin
-魔法函数
--魔法函数概述
--构造类魔法函数
--运算类魔法函数
'''

'''
1.面向对象概述（objectOriented，00）
-oop思想

-OOA:面向对象的分析
-OOD:面向对象的设计
-OOI:xxx的实现
-OOP:xxx的编程
-OOA->OOD->OOI:面向对象的实现过程
'''

'''
1.类和对象的概念
-类：抽象名词，代表一个集合，共性的事物
-对象：具象的事物，单个个体
-类和对象的关系
--一个具象，代表一类事物的某一个个体
--一个抽象，代表的是一大事物
-类中的内容应该具有两个内容
--表明事物的特征，叫做属性（变量）
--报名事物的动作或功能，叫做成员方法（函数）
'''

'''
2.类的基本实现
-类的命名
--遵守变量命名的规范
--尽量避免和系统相似的命名
-如何声明一个类
--类是由属性和方法构成，其他不允许出现
-成员属性定义可以直接使用变量赋值，如果没有值，允许使用None
-实例化类
变量 = 类名（）  实例化一个对象
-访问成员变量
--使用点操作符
  obj.成员变量
'''
'''
3.anaconda基本使用
-anaconda主要是一个虚拟环境管理器
-还是一个安装包管理器
-conda list：显示anaconda安装的包
-conda env list：显示anaconda的虚拟环境列表
-conda create -n xxx python=3.6:创建python版本为3.6的虚拟环境，名称为xxx
'''

'''
4.类和对象的成员分析
-类和对象都可以存储成员，成员可以归类所有，也可以归类所有
-类存储成员时使用的是与类关联的一个对象
-独享存储成员是存储在当前对象中
-对象访问一个成员时，如果对象中没有该成员，尝试访问类中的同名成员，如果对象中有此成员，一定使用对象中的成员
-创建对象的时候，类中的成员不会放入对象当中，而是得到一个空对象，没有成员
-通过对象对类中成员重新赋值或者通过对象添加成员时，对应成员会保存在对象中，而不会修改类成员                 
'''

'''
5.关于self
-self找对象的方法中表示当前对象本身，如果通过对象调用一个方法,那么该对象会自动传入到当前方法中
-self不是关键字，只是一个用于接受对象的普通函数，；理论上可以用任何一个普通变量名代替
-方法中有self形参的方法陈法改为非绑定类的方法，可以通过对象访问，没有self的是绑定类的方法只能通过类来访问
-使用类访问绑定类的方法时，如果类方法中需要访问当前类的成员，可以通过__class__成员名来实现
'''
'''
6.面向对象的三大特性
-封装
--封装的三个级别
    -公开，public
    -受保护，protected
    -私有的，private
    --这三个英文都不是关键字
--判别对象的位置
    -对象内部
    -对象外部
    -子类中
--私有
    -私有成员是追高级别的封装，只能在当前类或对象中访问
    -在成员前面添加两下划线即可：__age=18
    
-继承
-多态
'''